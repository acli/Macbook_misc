#!/usr/bin/perl
# vi: sw=3 ai sm:

# usage: mrtg-getinfo-sensors
#
# This script polls information from smc(8) and outputs the polled
# information in a format usable by mrtg. It can also function as a required
# file, in which case it will gather the data from sensors(1) but not output
# anything to stdout.

use strict;
use integer;

use Getopt::Long;

use POSIX;
use Unix::Uptime;

use vars qw( @sensorsflags );
use vars qw( $verbose_p );

# See if we are being require'd from another perl5 program.
# If we are, we expect caller(0) to return non-null information;
# in particular, $subroutine should be "(eval)" (by empirical observation).

my($package, $filename, $line, $subroutine, $hasargs, $wantargs) = caller(0);
if (! defined $subroutine) {
   GetOptions(
      'debug' => sub { @sensorsflags = qw(-c /etc/sensors.new) },
      'verbose|v' => \$verbose_p,
   ) || exit(1);
}

sub read_sensor ($) {
   my($key) = @_;
   my $pid = open(SENSORS, '-|');
   die "fork: $!\n" unless defined $pid;
   if (!$pid) {
      my $sensors = '/usr/local/sbin/smc';
      my @cmd = ($sensors, '-k', $key, '-r');
      printf STDERR "%u#\t%s\n", time, "@cmd" if $verbose_p;
      exec {$sensors} @cmd;
      die "$sensors: exec: $!\n";
   }
   my $data = scalar <SENSORS>;
   close SENSORS;
   my $it;
   if ($data =~ /$key  \[....\]  (\d+) \(.*\)/) {
      $it = $1;
   } elsif ($data =~ /(?=T)$key  \[sp78\]  \(bytes (.*)\)/) {
      # These formulas may or may not be correct, but apparently they are
      my @bytes = map { hex($_) } split(/ /, $1);
      no integer;
      $it = $bytes[0] + $bytes[1]/256.0;
   } elsif ($data =~ /no data/) {
      $it = undef;
   }
   return $it;
}

sub get_hostname () {
   my($sysname, $nodename, $release, $version, $machine) = POSIX::uname();
   my $hostname = $nodename;
   $hostname = $1 if $hostname =~ /^en[01]\.([^\.]+)\./; # hack for ada.dhs.org
   return $hostname;
}

sub format_value ($) {
   my($val) = @_;
   return defined $val && $val =~ /\S/s? $val: '##UNDEF##';
}

sub format_uptime ($) {
   my($uptime) = @_;
   my $it = '';
   if ($uptime >= 86400) {
      my($days) = int($uptime/86400);
      $it .= sprintf("%d day%s, ", $days, $days == 1? "": "s");
   }
   $it .= sprintf("%02d:%02d:%02d",
	 ($uptime/3600)%24, ($uptime/60)%60, $uptime%60);
   return $it;
}

################################################################################

my $fan0 = read_sensor(@ARGV > 0? $ARGV[0]: 'F0Ac');
my $fan1 = read_sensor(@ARGV > 1? $ARGV[1]: 'F1Ac');
my $uptime = Unix::Uptime->uptime();
my $hostname = get_hostname;

printf "%s\n%s\n%s\n%s\n", format_value($fan0), format_value($fan1), format_uptime($uptime), $hostname;
1;
