#!/usr/bin/perl
# vi: sw=3 ai sm:

use strict;
use integer;

use Getopt::Long;

use vars qw( $actual_p $target_p );
use vars qw( $verbose_p );

# See if we are being require'd from another perl5 program.
# If we are, we expect caller(0) to return non-null information;
# in particular, $subroutine should be "(eval)" (by empirical observation).

my($package, $filename, $line, $subroutine, $hasargs, $wantargs) = caller(0);
if (! defined $subroutine) {
   GetOptions(
      'actual' => \$actual_p,
      'setpoint|target' => \$target_p,
      'verbose|v' => \$verbose_p,
   ) || exit(1);
}

sub read_sensor ($) {
   my($key) = @_;
   my $pid = open(SENSORS, '-|');
   die "fork: $!\n" unless defined $pid;
   if (!$pid) {
      my $sensors = '/usr/local/sbin/smc';
      my @cmd = ($sensors, '-k', $key, '-r');
      printf STDERR "%u#\t%s\n", time, "@cmd" if $verbose_p;
      exec {$sensors} @cmd;
      die "$sensors: exec: $!\n";
   }
   my $data = scalar <SENSORS>;
   close SENSORS;
   my $it;
   if ($data =~ /$key  \[....\]  (\d+) \(.*\)/) {
      $it = $1;
   } elsif ($data =~ /(?=T)$key  \[sp78\]  \(bytes (.*)\)/) {
      my @bytes = map { hex($_) } split(/ /, $1);
      no integer;
      $it = $bytes[0] + $bytes[1]/256.0 if $bytes[0] && $bytes[0] != 0xff;
   } elsif ($data =~ /no data/) {
      $it = undef;
   }
   return $it;
}

sub write_sensor ($$$) {
   my($key, $type, $intval) = @_;
   my $pid = open(SENSORS, '|-');
   die "fork: $!\n" unless defined $pid;
   if (!$pid) {
      my $sensors = '/usr/local/sbin/smc';
      my $code;
      if ($type eq 'ui16') {
	 $code = sprintf "%04x", $intval;
      } elsif ($type eq 'sp78') {
	 $code = $intval << 2;
	 $code = sprintf "%04x", $code;
      } else {
	 die;
      }
      my @cmd = ($sensors, '-k', $key, '-w', $code);
      printf STDERR "%u#\t%s\n", time, "@cmd" if $verbose_p;
      exec {$sensors} @cmd;
      die "$sensors: exec: $!\n";
   }
   close SENSORS;
}

################################################################################

my $ack;

if (@ARGV == 0) {
   $ack = 1;
} elsif (@ARGV == 1) {
   my $setpoint = $ARGV[0];
   die "Nonsensical to set actual fan speed\n" if $actual_p;
   if ($setpoint !~ /^\d+$/) {
      die "Setpoint be a whole number\n";
   } elsif ($setpoint < 2000) {
      die "Setpoint too low\n";
   } elsif ($setpoint > 6200) {
      die "Setpoint too high\n";
   } else {
      write_sensor('FS! ', 'ui16', 1);
      write_sensor('F0Tg', 'sp78', $setpoint);
      $ack = $verbose_p;
   }
} else {
   die "Too many arguments\n";
}
if ($ack) {
   my $curr_speed = read_sensor('F0Ac');
   my $curr_setpoint = read_sensor('F0Tg');
   if ((!$actual_p && !$target_p) || ($actual_p && $target_p)) {
      printf "Fan speed: %d, setpoint: %d\n", $curr_speed, $curr_setpoint;
   } elsif ($actual_p) {
      printf "%d\n", $curr_speed;
   } elsif ($target_p) {
      printf "%d\n", $curr_setpoint;
   }
}
